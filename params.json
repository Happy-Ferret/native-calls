{"name":"Native-calls","tagline":"JavaScript - Native Client RPC ","body":"# Native Calls\r\n\r\nNative Calls allows developers to write IDL files that get compiled into C++ and JavaScript stubs that implement RPC calls over ```postMessage```.\r\nThe result is a nice, clean way of using Native Code straight from JavaScript! You can look at the presentation [here](https://github.com/meltuhamy/native-calls-presentation) and read the final report [here](https://github.com/meltuhamy/native-calls-report).\r\n\r\nPart of my final year project at [Imperial College London](http://www3.imperial.ac.uk/computing/).\r\n\r\nThis is still work in progress, but feedback is much appreciated!\r\n\r\n\r\n\r\n## Getting started\r\n[Please read the getting started guide](https://github.com/meltuhamy/native-calls/tree/master/docs/getting-started.md) to see how Native Calls works and how to use it.\r\n\r\n## Build\r\nTo build the project, you'll need the following requirements:\r\n\r\n1. The [Native Client SDK](https://developers.google.com/native-client/dev/).\r\n2. The [NACL_SDK_ROOT](https://developers.google.com/native-client/dev/devguide/devcycle/building) variable set.\r\n3. [node.js](http://nodejs.org/)\r\n\r\nTo build, simply run ```make``` in this folder. This will get JavaScript dependencies, build the C++ RPC library and build each individual demo.\r\n\r\n**Note:** I have only tested this on Mac OSX and linux. Compiling on Windows will probably break.\r\n\r\n## Run\r\nTo see it in action, make sure you have built the project (see above). Then, type ```make serve```. This will start a server in the project directory.\r\n\r\nVisit the index page, by typing http://localhost:3000/ into your browser.\r\n\r\n## Install\r\nTo install the C++ library to your SDK, run ```make install```.\r\nThis will build the library for all toolchains and configurations.\r\nThis will also install the generator, ```pprpcgen``` globally.\r\n\r\nIf you want to only install ```pprpcgen``` without cloning this repository, you can type ```npm install -g native-calls```.\r\n\r\n# Development\r\n\r\n## Test\r\nTo run all tests, type ```make test```. This will test JavaScript front end, back end (generators), and C++ tests.\r\nYou can also test each component individually:\r\n\r\n* ```make test``` runs all tests\r\n* ```make nodetest``` runs generator tests\r\n* ```make cpptest``` runs C++ rpc framework tests\r\n* ```make eetest``` runs end-to-end tests\r\n* ```make jstest``` runs JavaScript rpc framework tests\r\n\r\nThe tests are run using [karma](https://github.com/karma-runner/karma).\r\n\r\n## TODO\r\n\r\nIf you're interested in contributing, here are some things that still need to be done...\r\n\r\n* Generating JS skeletons for the Emscripten code (possibly in combination pepper.js) and provide automatic fallback for browsers which don't support Native Client\r\n* Performance optimization, in particular efficient use of binary arrays\r\n* Generating C++ stubs and JS skeletons to allow calls from native into JS code\r\n* Support for transferring binary\r\n\r\n## Docs\r\n\r\nYou can read some design docs in the [docs folder](https://github.com/meltuhamy/native-calls/tree/master/docs).\r\n\r\nThe full project report (in progress) is written in TeX and is found in the [report repo](https://github.com/meltuhamy/native-calls-report).\r\n\r\n## Eclipse\r\nHow to set up the Native Calls project in Eclipse.\r\n\r\nA project has already been created and is in the repository. All you need to do is to configure it with your ```NACL_SDK_ROOT```.\r\n\r\n\r\n1. Download [eclipse CDT](http://goo.gl/Rymz93)\r\n2. Clone the [Native Calls project](http://goo.gl/qarpeD).\r\n3. Copy the ```.cproject.sample``` file and save it as ```.cproject```.\r\n4. Open eclipse\r\n5. Import the project. ```File``` -> ```Import...``` -> ```Existing Project into Workspace```\r\n6. Right click on the project and click properties.\r\n7. Under ```C/C++ Build``` -> ```Enivronment```, set the ```NACL_SDK_ROOT``` variable to be the NaCl SDK location. Save for all configurations.\r\n8. Under ```C/C++ Build``` -> ```Build Variables```, set the ```NACL_SDK_ROOT``` variable to be a directory pointing to your NaCl SDK location. Save for all configurations.\r\n9. Right click on the project and choose ```Index``` -> ```Rebuild``` to rebuild the index.\r\n10. Done! Clicking the build button runs ```make```.\r\n\r\nYou can also set up eclipse to debug the C/C++ application. This is shown in the [chromium how-to](http://www.chromium.org/nativeclient/how-tos/debugging-documentation/debugging-with-debug-stub-recommended/debugging-nacl-apps-in-eclipse-cdt).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}